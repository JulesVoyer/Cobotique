from djitellopy import Tello
import time
import matplotlib.pyplot as plt
import cv2

def move_and_log(tello, movement, distance, pos):
    """
    Effectue un mouvement et met à jour la position.
    """
    if movement == "forward":
        tello.move_forward(distance)
        pos[1] += distance
    elif movement == "backward":
        tello.move_back(distance)
        pos[1] -= distance
    elif movement == "left":
        tello.move_left(distance)
        pos[0] -= distance
    elif movement == "right":
        tello.move_right(distance)
        pos[0] += distance
    elif movement == "up":
        tello.move_up(distance)
        pos[2] += distance
    elif movement == "down":
        tello.move_down(distance)
        pos[2] -= distance

    positions.append(tuple(pos))  # Enregistre la position


def qr_code_detected(tello: Tello):
    """
    Capture une image du flux vidéo du drone et détecte les QR codes.
    """
    frame_read = tello.get_frame_read()
    img = frame_read.frame
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    qr_detector = cv2.QRCodeDetector()
    data, bbox, _ = qr_detector.detectAndDecode(gray)
    if data:
        return True
    else:
        return False


def get_qr_code_relative_position(tello: Tello):
    """
    Retourne la position relative du QR code par rapport au drone.
    """
    frame_read = tello.get_frame_read()
    img = frame_read.frame
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    qr_detector = cv2.QRCodeDetector()
    data, bbox, _ = qr_detector.detectAndDecode(gray)
    if data:
        if bbox is not None:
            # Calculer le centre de l'image
            img_center_y, img_center_z = img.shape[0] // 2, img.shape[1] // 2

            # Calculer le centre de la boîte englobante du QR code
            bbox_center_y, bbox_center_z = bbox[0][0] + (bbox[0][2] - bbox[0][0]) // 2, bbox[0][1] + (bbox[0][3] - bbox[0][1]) // 2
            # Calculer la position relative du QR code par rapport au centre de l'image
            relative_y, relative_z = bbox_center_y - img_center_y, bbox_center_z - img_center_z
            return relative_y, relative_z

    else:
        print("Aucun QR Code détecté")
    
def center_qr_code(tello: Tello):

    relative_y, relative_z = get_qr_code_relative_position(tello)
    if abs(relative_y) <= 20 & abs(relative_z) <= 20: # Si le QR code est centré, on finit
        return
    #sinon, recherche dichotomique de la position du QR code
    pos_y = 0
    pos_z = 0
    pos_y_min = -100
    pos_y_max = 100
    pos_z_min = -100
    pos_z_max = 100


    while abs(relative_y) > 20 | abs(relative_z) > 20:
        if relative_y > 0:
            pos_y_min = pos_y
        else : 
            pos_y_max = pos_y
        
        if relative_z > 0:
            pos_z_min = pos_z
        else : 
            pos_z_max = pos_z
        next_pos_y = (pos_y_min + pos_y_max) // 2
        next_pos_z = (pos_z_min + pos_z_max) // 2
        move_and_log(tello, "forward", next_pos_y - pos_y, pos)
        move_and_log(tello, "right", next_pos_z - pos_z, pos)
        pos_y = next_pos_y
        pos_z = next_pos_z
        relative_y, relative_z = get_qr_code_relative_position(tello)

    return
    



    

if __name__ == "__main__":
    tello = Tello()
    tello.connect()
    tello.takeoff()

    pos = [0, 0, 0]  # Position initiale (x, y, z)
    positions = [tuple(pos)]

    # tello.move_up(10)
    # pos[2] += 10
    # positions.append(tuple(pos))

    # # Déplacement en grille 2x2 pour la cartographie
    # move_and_log(tello, "forward", 10, pos)
    # move_and_log(tello, "right", 10, pos)
    # move_and_log(tello, "backward", 10, pos)
    # move_and_log(tello, "left", 10, pos)

    # tello.move_down(10)
    # pos[2] -= 10

    # recherche du QR code
    while not qr_code_detected(tello) and tello.get_height()<250:
        angle = 0
        while not qr_code_detected(tello) and angle < 360:
            tello.rotate_counter_clockwise(30)
            time.sleep(1)
        
        tello.move_up(20)
        time.sleep(1)
    
    center_qr_code(tello)   
    # ON donne l'altitude

    print("QR Code détecté")
    print("Position relative du QR Code par rapport au drone : ", get_qr_code_relative_position(tello))
    print("Altitude du drone : ", tello.get_height())

    

    # Descente et atterrissage

    positions.append(tuple(pos))

    tello.land()

    # Tracé de la cartographie
    x_vals = [p[0] for p in positions]
    y_vals = [p[1] for p in positions]
    plt.plot(x_vals, y_vals, marker="o", linestyle="-", label="Trajectoire du drone")
    plt.xlabel("X (cm)")
    plt.ylabel("Y (cm)")
    plt.title("Cartographie du déplacement du drone")
    plt.legend()
    plt.grid()
    plt.show()
