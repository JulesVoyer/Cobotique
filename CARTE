from djitellopy import Tello
import time
import matplotlib.pyplot as plt

def move_and_log(tello : Tello, movement : str , distance : float, pos : tuple[float,float]):

    """
    Fait bouger le drone et sauvegarde sa position dans la liste positions.

    Parameters
    ----------
    tello : Tello
        Le drone
    movement : str
        Le mouvement a faire (forward, backward, left, right, up, down)
    distance : float
        La distance a parcourir
    pos : tuple[float,float]
        La position actuelle du drone

    Returns
    -------
    None
    """

    if movement == "forward":
        tello.move_forward(distance)
        pos[1] += distance
    elif movement == "backward":
        tello.move_back(distance)
        pos[1] -= distance
    elif movement == "left":
        tello.move_left(distance)
        pos[0] -= distance
    elif movement == "right":
        tello.move_right(distance)
        pos[0] += distance
    elif movement == "up":
        tello.move_up(distance)
        pos[2] += distance
    elif movement == "down":
        tello.move_down(distance)
        pos[2] -= distance

    positions.append(tuple(pos))  # Enregistre la position


def move_to_and_log (tello : Tello, x : float, y : float,  pos : tuple[float,float]):

    
    

    """
    Fait bouger le drone pour qu'il arrive a la position (x,y) et sauvegarde sa position dans la liste positions.

    Parameters
    ----------
    tello : Tello
        Le drone
    x : float
        la nouvelle abscisse
    y : float
        la nouvelle ordonnee
    pos : tuple[float,float]
        La position actuelle du drone

    Returns
    -------
    None
    """
    dx = x - pos[0]
    dy = y - pos[1]

    if dx > 0:
        tello.move_right(dx)
    else:
        tello.move_left(-dx)
    pos[0] = x

    if dy > 0:
        tello.move_forward(dy)
    else:
        tello.move_back(-dy)
    pos[1] = y

    positions.append(tuple(pos))  # Enregistre la position

  

if __name__ == "__main__":
    tello = Tello()
    tello.connect()
    tello.takeoff()

    pos = [0, 0, 0]  # Position initiale (x, y, z)
    positions = [tuple(pos)]

    tello.move_up(20)
    pos[2] += 20
    positions.append(tuple(pos))

    # Déplacement en grille 2x2 pour la cartographie
    move_and_log(tello, "forward", 20, pos)
    move_and_log(tello, "right", 20, pos)
    move_and_log(tello, "backward", 20, pos)
    move_and_log(tello, "left", 20, pos)

    # Descente et atterrissage
    tello.move_down(20)
    pos[2] -= 20
    positions.append(tuple(pos))

    tello.land()

    # Tracé de la cartographie
    x_vals = [p[0] for p in positions]
    y_vals = [p[1] for p in positions]
    plt.plot(x_vals, y_vals, marker="o", linestyle="-", label="Trajectoire du drone")
    plt.xlabel("X (cm)")
    plt.ylabel("Y (cm)")
    plt.title("Cartographie du déplacement du drone")
    plt.legend()
    plt.grid()
    plt.show()
